df_raw = read.xlsx("sidoAirInfo.xlsx", sheet = 1, startRow = 2)
city = gsub(" ", "", as.character(df_raw[1,2:18]))
city
PM = gsub(" ", "", as.numeric(as.character(df_raw[2, 2:18])))
PM
gc = geocode(enc2utf8(city))
df = data.frame(city = city,
pm = PM,
lon = gc$lon,
lat = gc$lat)
# ‘세종’이라는 ‘행(row)’ 전체를 삭제
df = df[df$city != "세종", ]
df
ggplot(data=df,
aes(x=reorder(city, -pm),
y=pm)) + geom_col() + xlab("city") + ylab("pm")
ggplot(df,
aes(x=reorder(city, -pm),
y=pm)) + geom_col() + xlab("city") + ylab("pm")
ggplot(df,
aes(
x = reorder(city, -pm),
y = pm)) +
geom_col() +
xlab("city") + ylab("pm")
ggplot(df,
aes(
x = reorder(city, -pm),
y = pm)) +
geom_col() +
xlab("city") + ylab("pm")
ggplot(df,
aes(
x = reorder(city, -pm),
y = pm)) +
geom_col() +
xlab("city") + ylab("pm")
# 60241996 김민준 (융합소프트웨어학부 데이터사이언스 전공)
library(openxlsx)
library(ggmap)
library(ggplot2)
register_google(key = "AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk")
df_raw = read.xlsx("sidoAirInfo.xlsx", sheet = 1, startRow = 2)
city = gsub(" ", "", as.character(df_raw[1,2:18]))
city
# 60241996 김민준 (융합소프트웨어학부 데이터사이언스 전공)
library(openxlsx)
library(ggmap)
library(ggplot2)
register_google(key = "AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk")
df_raw = read.xlsx("sidoAirInfo.xlsx", sheet = 1, startRow = 2)
city = gsub(" ", "", as.character(df_raw[1,2:18]))
city
PM = gsub(" ", "", as.numeric(as.character(df_raw[2, 2:18])))
PM
gc = geocode(enc2utf8(city))
df = data.frame(city = city,
pm = PM,
lon = gc$lon,
lat = gc$lat)
# ‘세종’이라는 ‘행(row)’ 전체를 삭제
df = df[df$city != "세종", ]
df
ggplot(data=df,
aes(x=reorder(city, -pm),
y=pm)) + geom_col() + xlab("city") + ylab("pm")
# 60241996 김민준 (융합소프트웨어학부 데이터사이언스 전공)
library(openxlsx)
library(ggmap)
library(ggplot2)
register_google(key = "AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk")
df_raw = read.xlsx("sidoAirInfo.xlsx", sheet = 1, startRow = 2)
city = gsub(" ", "", as.character(df_raw[1,2:18]))
city
# 60241996 김민준 (융합소프트웨어학부 데이터사이언스 전공)
library(openxlsx)
library(ggmap)
library(ggplot2)
register_google(key = "AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk")
df_raw = read.xlsx("sidoAirInfo.xlsx", sheet = 1, startRow = 2)
city = gsub(" ", "", as.character(df_raw[1,2:18]))
city
PM = gsub(" ", "", as.numeric(as.character(df_raw[2, 2:18])))
PM
gc = geocode(enc2utf8(city))
df = data.frame(city = city,
pm = PM,
lon = gc$lon,
lat = gc$lat)
# ‘세종’이라는 ‘행(row)’ 전체를 삭제
df = df[df$city != "세종", ]
df
ggplot(data=df,
aes(x=reorder(city, -pm),
y=pm)) + geom_col() + xlab("city") + ylab("pm")
# 60241996 김민준 (융합소프트웨어학부 데이터사이언스 전공)
library(openxlsx)
library(ggmap)
library(ggplot2)
register_google(key = "AIzaSyAFw3210sFaygVU_4ktse1_k2dja8nU1kk")
df_raw = read.xlsx("sidoAirInfo.xlsx", sheet = 1, startRow = 2)
city = gsub(" ", "", as.character(df_raw[1,2:18]))
city
PM = as.numeric(gsub(" ", "", as.character(df_raw[2, 2:18])))
PM
gc = geocode(enc2utf8(city))
df = data.frame(city = city,
pm = PM,
lon = gc$lon,
lat = gc$lat)
# ‘세종’이라는 ‘행(row)’ 전체를 삭제
df = df[df$city != "세종", ]
df
ggplot(data=df,
aes(x=reorder(city, -pm),
y=pm)) + geom_col() + xlab("city") + ylab("pm")
# 2. 각지역별 초미세먼지 수치를 지도에 나타내어라
cen = c((max(df$lon) + min(df$lon)) / 2,
(max(df$lat) + min(df$lat)) / 2)
map = get_googlemap(center = cen, zoom = 7)
gmap = ggmap(map)
gmap + geom_point(data = df,
aes(x = lon, y = lat),
color = "red",
size = df$pm * 0.6,
alpha = 0.5)
gmap = ggmap(map)
gmap + geom_point(data = df,
aes(x = lon, y = lat),
color = "red",
size = df$pm * 0.6,
alpha = 0.5)
map=get_googlemap(center=lonlat,
maptype="roadmap",
zoom=13,
size=c(320,320))
getwd()
getwd()
setwd("/Users/viola_patrinii/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science")
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
#reopen with encoding: CP949
getwd()
setwd("/Users/viola_patrinii/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science")
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename = paste("seoul_", files[i], "xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds = readxl_excel(filename)
ds = data.frame(ds)
ds = ds[,columns]
ds$수집연월 = rep(i, nrow(ds))
ds.total = rbind(ds.total, ds)
}
#reopen with encoding: CP949
getwd()
setwd("/Users/viola_patrinii/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science")
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename = paste("seoul_", files[i], "xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds = read_excel(filename)
ds = data.frame(ds)
ds = ds[,columns]
ds$수집연월 = rep(i, nrow(ds))
ds.total = rbind(ds.total, ds)
}
#reopen with encoding: CP949
getwd()
setwd("/Users/viola_patrinii/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science")
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename = paste("seoul_", files[i], ".xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds = read_excel(filename)
ds = data.frame(ds)
ds = ds[,columns]
ds$수집연월 = rep(i, nrow(ds))
ds.total = rbind(ds.total, ds)
}
getwd()
setwd("/Users/viola_patrinii/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science")
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename = paste("seoul_", files[i], ".xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds = read_excel(filename)
ds = data.frame(ds)
ds = ds[,columns]
ds$수집연월 = rep(i, nrow(ds))
ds.total = rbind(ds.total, ds)
}
#reopen with encoding: CP949
getwd()
setwd("/Users/viola_patrinii/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science")
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename = paste("seoul_", files[i], ".xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds = read_excel(filename)
ds = data.frame(ds)
ds = ds[,columns]
ds$수집연월 = rep(i, nrow(ds))
ds.total = rbind(ds.total, ds)
}
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
#reopen with encoding: CP949
getwd()
setwd("/Users/viola_patrinii/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science")
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename = paste("seoul_", files[i], ".xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds = read_excel(filename)
ds = data.frame(ds)
ds = ds[,columns]
ds$수집연월 = rep(i, nrow(ds))
ds.total = rbind(ds.total, ds)
}
getwd()
#reopen with encoding: CP949
getwd()
setwd("/Users/viola_patrinii/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science")
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename = paste("seoul_", files[i], ".xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds = read_excel(filename)
ds = data.frame(ds)
ds = ds[,columns]
ds$수집연월 = rep(i, nrow(ds))
ds.total = rbind(ds.total, ds)
}
#reopen with encoding: CP949
getwd()
setwd("/Users/viola_patrinii/Desktop/Univ-MajorHub/2025-Univ-2nd-Year/Introduction-to-Data-Science")
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename = paste("seoul_", files[i], ".xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds = read_excel(filename)
ds = data.frame(ds)
ds = ds[,columns]
ds$수집연월 = rep(i, nrow(ds))
ds.total = rbind(ds.total, ds)
}
# 분포 적합을 위한 패키지 설치 및 로드
install.packages("propagate")
library("propagate")
# 시드 고정 및 데이터 생성 (평균 5인 정규분포 데이터 10,000개)
set.seed(275)
observations = rnorm(10000, 5)
# 여러 확률분포에 적합 시도
distTested = fitDistr(observations)
# 결과 출력 (AIC/BIC/RSS/MSE 등을 포함한 평가 지표 확인 가능)
distTested$stat
hist(employee$incentive[employee$year == 2007], breaks = 50)
#####
read.csv("employees_ex.csv")
read.csv("employees_ex.csv")
hist(employee$incentive[employee$year == 2007], breaks = 50)
#####
employee = read.csv("employees_ex.csv")
hist(employee$incentive[employee$year == 2007], breaks = 50)
hist(employee$incentive[employee$year == 2008], breaks = 50)
hist(employee$incentive[employee$gender == "F"], breaks = 50)
hist(employee$incentive[employee$gender == "M"], breaks = 50)
hist(employee$incentive[employee$negotiated == FALSE], breaks = 50)
hist(employee$incentive[employee$negotiated == TRUE], breaks = 50)
# 난수 생성
rnorm(100, 0, 10)         # 평균 0, 표준편차 10인 정규 분포로부터 난수 100개를 생성
# 확률밀도 생성
plot(density(rnorm(100000, 0, 10)))    # 많은 수의 난수를 만들고 밀도 그림을 그리면 데이터의 분포를 알 수 있음
pnorm(0)               # 0: 누적 분포 함수 → 결과는 0.5 (정규분포의 평균에서 누적 확률은 0.5)
qnorm(0.5)             # 0.5: 분위수 함수 → 정규분포에서 누적확률이 0.5가 되는 값 = 평균
# 정규분포의 밀도함수를 직접 그리는 방법
x = seq(-40, 40, length=100000)
y = dnorm(x, mean=0, sd=10)
plot(x, y, type="l")    # 선그래프로 그림
# 누적분포 함수와 분위수 함수 예시 (다시 한번)
pnorm(0)
qnorm(0.5)
x = seq(0, 16, length=100)
y = dnorm(x, mean=7.5, sd=1.5)
plot(x, y, type="l",
xlab="Liters per day",
ylab="Density",
main="Liters of water drunken by school children < 12 years old")
# 4이하의 물을 마실 확률 : Lower tail
pnorm(4, mean=7.5, sd=1.5, lower.tail=TRUE)
plot.new()
plot(x, y, type="l",
xlab="Liters per day",
ylab="Density")
# 8리터 이상 물을 마실 확률
lower = 8
upper = 15
# 8과 15 사이에 있는 x값 모으기
i = x >= lower & x < upper
polygon(c(lower, x[i], upper), c(0, y[i], 0), col="red")
abline(h=0, col="gray")
# 확률 계산
pb = round(pnorm(8, mean=7.5, sd=1.5, lower.tail=FALSE), 2)
pb
pb.results = paste("Cumulative probability of a child drinking > 8L/day", pb, sep=":")
title(pb.results)
runs <- 100000
sims <- rnorm(runs, mean=1, sd=10)
mc.integral <- sum(sims >= 3 & sims <= 6)/runs
mc.integral
library(ggplot2)
# 1. [-1, 1] 구간에서 x, y 좌표 각각 10,000개 무작위 생성
x = runif(n = 10000, min = -1, max = 1)
y = runif(n = 10000, min = -1, max = 1)
# 2. x^2 + y^2 ≤ 1 인 점은 원 안에 있음 (원의 방정식)
in_circle = ifelse(x^2 + y^2 <= 1, 1, 0)
# 3. 원 안에 있는 점 개수 세기
points_in_circle = sum(in_circle)
# 4. 전체 중에서 원 안에 있는 비율 × 4 = π 추정
pie_est = (points_in_circle / length(x)) * 4
# 5. 결과 출력
pie_est
# 6. 시각화: 원 안/밖 점들을 색으로 나눠서 그리기
pie_data = data.frame(x, y, in_circle)
ggplot(pie_data, aes(x = x, y = y, color = as.factor(in_circle))) +
geom_point()
# π 추정 함수 정의
estimate_pi <- function(seed = 28, iterations = 1000){
# 시드 고정 → 매번 같은 결과 재현 가능하게
set.seed(seed)
# [-1, 1] 범위에서 난수 생성
x <- runif(n = iterations, min = -1, max = 1)
y <- runif(n = iterations, min = -1, max = 1)
# 점 (x, y)의 거리 계산: sqrt(x² + y²)
sum_sq_xy <- sqrt(x^2 + y^2)
# 원 안에 들어간 점 찾기 (반지름 1인 원)
index_within_circle <- which(sum_sq_xy <= 1)
points_within_circle <- length(index_within_circle)
# 비율 × 4 → π 추정
pi_est <- 4 * points_within_circle / iterations
return(pi_est)
}
# 테스트: 10,000개의 점으로 추정
estimate_pi(seed = 28, iterations = 10000)
# 다양한 반복 횟수로 테스트 (정확도 비교)
no_of_iterations <- c(10, 100, 1000, 10000, 100000, 1000000)
# 각 반복횟수마다 π 추정값 계산
res <- sapply(no_of_iterations, function(n) estimate_pi(iterations = n))
# 난수 생성
rnorm(100, 0, 10)
# 확률밀도 생성
plot(density(rnorm(100000, 0, 10)))
pnorm(0)
# 0: 누적 분포 함수 → 결과는 0.5 (정규분포의 평균에서 누적 확률은 0.5)
qnorm(0.5)
# 정규분포의 밀도함수를 직접 그리는 방법
x = seq(-40, 40, length=100000) # 축 정의: -40부터 40까지 10만 개의 값 생성 (촘촘한 수열)
y = dnorm(x, mean=0, sd=10)
# dnorm()은 정규분포의 확률 밀도 함수(PDF)
# x에 있는 각 값들에 대해 해당 정규분포의 곡선 높이 계산 (y축)
# x가 -40일 때의 높이, -39.999일 때의 높이, …, 40일 때의 높이까지 10만 개 구함
plot(x, y, type="l")    # 선그래프로 그림
# dnorm()은 정규분포의 확률 밀도 함수(PDF)
# x에 있는 각 값들에 대해 해당 정규분포의 곡선 높이 계산 (y축)
# x가 -40일 때의 높이, -39.999일 때의 높이, …, 40일 때의 높이까지 10만 개 구함
plot(x, y, type="l")    # 선그래프로 그림
# 누적분포 함수와 분위수 함수 예시 (다시 한번)
pnorm(0)
qnorm(0.5)
# (1) 어린이가 4리터 이하의 물을 마실 확률은 얼마인가?
x = seq(0, 16, length=100)
y = dnorm(x, mean=7.5, sd=1.5)
plot(x, y, type="l",
xlab="Liters per day",
ylab="Density",
main="Liters of water drunken by school children < 12 years old")
plot.new()
plot(x, y, type="l",
xlab="Liters per day",
ylab="Density")
# 8리터 이상 물을 마실 확률
lower = 8
upper = 15
# 8과 15 사이에 있는 x값 모으기
i = x >= lower & x < upper
polygon(c(lower, x[i], upper), c(0, y[i], 0), col="red")
abline(h=0, col="gray")
# 확률 계산
pb = round(pnorm(8, mean=7.5, sd=1.5, lower.tail=FALSE), 2)
pb
pb.results = paste("Cumulative probability of a child drinking > 8L/day", pb, sep=":")
title(pb.results)
runs <- 100000
sims <- rnorm(runs, mean=1, sd=10)
mc.integral <- sum(sims >= 3 & sims <= 6)/runs
mc.integral
library(ggplot2)
# 1. [-1, 1] 구간에서 x, y 좌표 각각 10,000개 무작위 생성
x = runif(n = 10000, min = -1, max = 1)
y = runif(n = 10000, min = -1, max = 1)
# 2. x^2 + y^2 ≤ 1 인 점은 원 안에 있음 (원의 방정식)
in_circle = ifelse(x^2 + y^2 <= 1, 1, 0)
# 3. 원 안에 있는 점 개수 세기
points_in_circle = sum(in_circle)
# 4. 전체 중에서 원 안에 있는 비율 × 4 = π 추정
pie_est = (points_in_circle / length(x)) * 4
# 5. 결과 출력
pie_est
# 6. 시각화: 원 안/밖 점들을 색으로 나눠서 그리기
pie_data = data.frame(x, y, in_circle)
pie_data
ggplot(pie_data, aes(x = x, y = y, color = as.factor(in_circle))) +
geom_point()
